# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.

import time
from browserid.utils import (encode_bytes, to_int, to_hex)
from browserid import jwt

MOCKMYID_MODULUS          = to_int("15498874758090276039465094105837231567265546373975960480941122651107772824121527483107402353899846252489837024870191707394743196399582959425513904762996756672089693541009892030848825079649783086005554442490232900875792851786203948088457942416978976455297428077460890650409549242124655536986141363719589882160081480785048965686285142002320767066674879737238012064156675899512503143225481933864507793118457805792064445502834162315532113963746801770187685650408560424682654937744713813773896962263709692724630650952159596951348264005004375017610441835956073275708740239518011400991972811669493356682993446554779893834303");

MOCKMYID_PUBLIC_EXPONENT  = to_int("65537");

MOCKMYID_PRIVATE_EXPONENT = to_int("6539906961872354450087244036236367269804254381890095841127085551577495913426869112377010004955160417265879626558436936025363204803913318582680951558904318308893730033158178650549970379367915856087364428530828396795995781364659413467784853435450762392157026962694408807947047846891301466649598749901605789115278274397848888140105306063608217776127549926721544215720872305194645129403056801987422794114703255989202755511523434098625000826968430077091984351410839837395828971692109391386427709263149504336916566097901771762648090880994773325283207496645630792248007805177873532441314470502254528486411726581424522838833");

MOCKMYID_KEY_DATA = {'n':MOCKMYID_MODULUS, 'e':MOCKMYID_PUBLIC_EXPONENT, 'd':MOCKMYID_PRIVATE_EXPONENT, 'algorithm':'RS'}
data = MOCKMYID_KEY_DATA.copy()

MOCKMYID_KEY = jwt.RS256Key(data)
data.pop('d')
MOCKMYID_PUBKEY = jwt.RS256Key(data)

def make_certificate(email, email_public_key, issuer, issuer_private_key, iat=None, exp=None):
    # Generate the certificate signing the email's public key
    # with the issuer's private key.

    if issuer is None:
        issuer = "mockmyid.com"
    if iat is None:
        iat = int(time.time() * 1000)
    if exp is None:
        exp = int(iat + 60 * 1000)

    certificate = {
        "iss": issuer,
        "iat": iat,
        "exp": exp,
        "principal": {"email": email},
        "public-key": email_public_key,
    }

    certificate = jwt.generate(certificate, issuer_private_key)

    return certificate

# print make_certificate("test@mockmyid.com", email_keypair[0], "mockmyid.com", issuer_keypair[1])
